一、简答题
1、Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
# 动态SQL就是动态拼接SQL,用于动态拼接参数进行处理
# if where include, choose when otherwise,map,set,trim
# 使用 OGNL 的表达式，从 SQL 参数对象中计算表达式的值,根据表达式的值动态拼接 SQL
# 动态SQL执行过程:
    初始化过程用于解析sql配置，生成由SqlChild节点组成的抽象语法树；请求处理过程
通过运行期的参数对象解释抽象语法树，生成实际的sql语句。

首先在解析xml配置文件的时候，会有一个SqlSource sqlSource = langDriver.createSqlSource(configuration, context, parameterTypeClass) 的操作

createSqlSource底层使用了XMLScriptBuilder来对xml中的标签进行解析
XMLScriptBuilder调用了parseScriptNode()的方法，

在parseScriptNode()的方法中有一个parseDynamicTags()方法，会对nodeHandlers里的标签根据不同的handler来处理不同的标签

然后把DynamicContext结果放回SqlSource中

DynamicSqlSource获取BoundSql

在Executor执行的时候，调用DynamicSqlSource的解析方法，并返回解析好的BoundSql，和已经排好序，需要替换的参数


2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
# 部分支持:
    Mybatis仅支持association关联对象和collection关联集合对象的延迟加载，
association指的就是一对一，collection指的就是一对多查询。在Mybatis配置文件中，
可以配置是否启用延迟加载 lazyLoadingEnabled=true|false。
# 它的原理是，使用CGLIB创建目标对象的代理对象，当调用目标方法时，进入拦截器方法，
比如调用a.getB().getName()，拦截器invoke()方法发现a.getB()是null值，那么就会单
独发送事先保存好的查询关联B对象的sql，把B查询上来，然后调用a.setB(b)，于是a的
对象b属性就有值了，接着完成a.getB().getName()方法的调用

3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
# Mybatis有三种基本的Executor执行器:
SimpleExecutor
ReuseExecutor
BatchExecutor

SimpleExecutor：每执行一次update或select，就开启一个Statement对象
，用完立刻关闭Statement对象。

ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，
不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。
简言之,s就是重复使用Statement对象。

BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都
添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个
Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行
executeBatch()批处理。与JDBC批处理相同。


4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
一级缓存：用HashMap来存,Mybatis的一级缓存是指SqlSession级别的，作用域是
SqlSession，Mybatis默认开启一级缓存，在同一个SqlSession中，相同的Sql查询的时候，
第一次查询的时候，就会从缓存中取，如果发现没有数据，那么就从数据库查询出来，
并且缓存到HashMap中，如果下次还是相同的查询，就直接从缓存中查询，
就不在去查询数据库，对应的就不在去执行SQL语句。当查询到的数据，
进行增删改的操作的时候，缓存将会失效。此外,多服务器场景失效.

二级缓存：用HashMap来存,二级缓存是mapper级别的缓存，多个SqlSession去操作同一个
mapper的sql语句，多个SqlSession可以共用二级缓存，二级缓存是跨SqlSession。
第一次调用mapper下的sql 的时候去查询信息，查询到的信息会存放到该mapper对应的
二级缓存区域，第二次调用namespace下的mapper映射文件中，相同的SQL去查询，
回去对应的二级缓存内取结果，如果在相同的namespace下的mapper映射文件中增删改，
并且提交了事务，就会失效。此外,多服务器场景失效.


5、简述Mybatis的插件运行原理，以及如何编写一个插件？
# Mybatis仅可以编写针对ParameterHandler、ResultSetHandler、StatementHandler
、Executor这4种接口的插件，Mybatis使用JDK的动态代理，为需要拦截的接口生成代理
对象以实现接口方法拦截功能，每当执行这4种接口对象的方法时，就会进入拦截方法，具体
就是InvocationHandler的invoke()方法，当然，只会拦截那些你指定需要拦截的方法。

实现Mybatis的Interceptor接口并复写intercept()方法，然后在给插件编写注解，指定
要拦截哪一个接口的哪些方法即可.项目中有用到多语言


二、编程题
请完善自定义持久层框架IPersistence，在现有代码基础上添加、修改及删除功能。【需要采用getMapper方式】

思路:
getMapper方式本质是获取类的一个代理,然后用代理直接去执行实体xml映射文件中的SQL脚本.动态代理会执行invoke方法,首先想到invoke方法需要做改动.
其次,根据自上而下的执行思路,具体过程如下,首先将自定义框架作为黑盒,先将调用方的业务sql和配置文件以及对应的Java文件写好;然后根据执行顺序应
该是sqlSession的实现类DefaultSqlSession调用Executor的实现类去SimpleExecutor去执行业务SQL.

在获取数据库配置信息之后,解析实体映射的时候需要把增删改的标签信息放入mappedstatement 的map中,便于后续调用


